type QuReg = [Float]

ide :: a -> a
ide x = x

plus :: QuReg -> QuReg -> QuReg
plus  = zipWith (+)

scalar :: Float -> QuReg -> QuReg
scalar a = map (a*)

repeatN :: Int -> a -> [a]
repeatN n = take n . repeat

delta :: Int -> Int -> QuReg
delta n i = repeatN i 0 ++ [1] ++ repeatN (2^n - i - 1) 0

tensor :: QuReg -> QuReg -> QuReg
tensor q r = [a*b | a <- q, b <- r]

trans :: (Int -> Int) -> QuReg -> QuReg
trans f q = zipWith (*) signs q
      	    where signs =  map (\x -> (-1)^(f x)) [0..2^n-1]
	    	  n = floor (logBase (fromIntegral 2) (fromIntegral (length q)))